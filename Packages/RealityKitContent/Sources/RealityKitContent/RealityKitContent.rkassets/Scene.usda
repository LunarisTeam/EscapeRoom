#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.60.4)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["offFile", "SkyDome", "DirectionalLight", "computer_old", "ButtonLeftPRess", "ButtonCenterPRess", "ButtonRightPRess", "computer"]
    float3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def "offFile" (
        active = true
        customData = {
            float3 rotationEulerHint = (-1.5707965, 0.9873288, -1.6228636e-7)
        }
        references = @offFile.usdc@
    )
    {
        reorder nameChildren = ["computer", "Corkboard_Corkboard_0", "_materials", "Potted_Plant_Aglaonema_Leaf_0", "Trash_Cam_Mesh_Basket_0", "Plane", "Plane_001", "Plane_002", "Plane_003", "Box02_Cube_226", "Cactus_Cylinder_014", "Table_Plane_001", "Point", "Cube", "PaperStack_005_Cube_001", "PaperStack_005_Cube_002", "PaperStack_005_Cube_003", "PaperStack_005_Cube_004", "PaperStack_005_Cube_005", "Shelf01_Cube_001", "File06_Cube_001", "File06_Cube_002", "File06_Cube_003", "File06_Cube_004", "PaperStack_005_Cube_006", "Plane_004", "PrinterNew", "Mug_Cylinder_013_Cylinder_007_001", "PrinterNew_003", "PrinterNew_004", "PrinterNew_005", "Paper03_Cube_001", "Photo_Cube_148_Cube_012_001", "Paper03_Cube_002", "PaperStack_005_Cube_007", "Plane_006", "Plane_007", "Plane_008"]
        quatf xformOp:orient = (0.6226798, -0.6226799, 0.33506674, 0.3350667)
        float3 xformOp:scale = (0.1, 0.1, 0.1)
        float3 xformOp:translate = (0, 8.791685e-7, -0.7)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Cube"
        {
            def Xform "Cube_5" (
                references = </Root/offFile/Cube/Cube_004>
            )
            {
                float2 ui:nodegraph:node:pos = (20, 20)
                int ui:nodegraph:node:stackingOrder = 1
                quatf xformOp:orient = (-2.2609545e-10, 0.7220181, -0.69187415, -3.5425973e-10)
                float3 xformOp:scale = (0.26206735, 0.01721356, 0.021472845)
                matrix4d xformOp:transform = ( (0.01116942334920168, -0.2618292272090912, 0, 0), (-0.017181068658828735, -0.0009979145834222436, 1.2082781442046553e-9, 0), (-6.961494936064128e-9, -4.043391177432909e-10, -0.02147284708917141, 0), (1.1455631256103516, 0.016131877899169922, -0.49977609515190125, 1) )
                float3 xformOp:translate = (1.1455386, 0.016139746, 0.11692828)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Mesh "Cube_015" (
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    uniform bool doubleSided = 1
                    float3[] extent = [(-3.9306934, -1, -7.773304), (3.7144055, 127.7104, 20.250599)]
                    int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 4, 4, 4, 4, 4, 4]
                    int[] faceVertexIndices = [50, 61, 12, 1, 74, 85, 62, 49, 84, 36, 13, 60, 2, 14, 38, 25, 26, 37, 86, 73, 0, 3, 5, 4, 3, 7, 8, 5, 1, 6, 8, 7, 6, 10, 11, 8, 2, 9, 11, 10, 9, 4, 5, 11, 5, 8, 11, 12, 15, 17, 16, 15, 19, 20, 17, 13, 18, 20, 19, 18, 22, 23, 20, 14, 21, 23, 22, 21, 16, 17, 23, 17, 20, 23, 24, 27, 29, 28, 27, 31, 32, 29, 25, 30, 32, 31, 30, 34, 35, 32, 26, 33, 35, 34, 33, 28, 29, 35, 29, 32, 35, 36, 39, 41, 40, 39, 43, 44, 41, 37, 42, 44, 43, 42, 46, 47, 44, 38, 45, 47, 46, 45, 40, 41, 47, 41, 44, 47, 48, 51, 53, 52, 51, 55, 56, 53, 49, 54, 56, 55, 54, 58, 59, 56, 50, 57, 59, 58, 57, 52, 53, 59, 53, 56, 59, 60, 63, 65, 64, 63, 67, 68, 65, 61, 66, 68, 67, 66, 70, 71, 68, 62, 69, 71, 70, 69, 64, 65, 71, 65, 68, 71, 72, 75, 77, 76, 75, 79, 80, 77, 73, 78, 80, 79, 78, 82, 83, 80, 74, 81, 83, 82, 81, 76, 77, 83, 77, 80, 83, 84, 87, 89, 88, 87, 91, 92, 89, 85, 90, 92, 91, 90, 94, 95, 92, 86, 93, 95, 94, 93, 88, 89, 95, 89, 92, 95, 24, 0, 4, 27, 27, 4, 9, 31, 31, 9, 2, 25, 1, 12, 16, 6, 6, 16, 21, 10, 10, 21, 14, 2, 13, 36, 40, 18, 18, 40, 45, 22, 22, 45, 38, 14, 37, 26, 34, 42, 42, 34, 30, 46, 46, 30, 25, 38, 72, 24, 28, 75, 75, 28, 33, 79, 79, 33, 26, 73, 36, 84, 88, 39, 39, 88, 93, 43, 43, 93, 86, 37, 85, 74, 82, 90, 90, 82, 78, 94, 94, 78, 73, 86, 48, 72, 76, 51, 51, 76, 81, 55, 55, 81, 74, 49, 84, 60, 64, 87, 87, 64, 69, 91, 91, 69, 62, 85, 61, 50, 58, 66, 66, 58, 54, 70, 70, 54, 49, 62, 0, 48, 52, 3, 3, 52, 57, 7, 7, 57, 50, 1, 60, 13, 19, 63, 63, 19, 15, 67, 67, 15, 12, 61, 24, 72, 48, 0, 96, 97, 99, 98, 98, 99, 103, 102, 101, 100, 106, 107, 100, 101, 97, 96, 98, 102, 100, 96, 105, 104, 107, 106, 100, 102, 105, 106, 103, 101, 107, 104, 102, 103, 104, 105, 112, 113, 111, 110, 110, 111, 109, 108, 112, 110, 108, 114, 111, 113, 115, 109, 108, 109, 115, 114, 112, 114, 108, 115, 113, 120, 121, 119, 118, 118, 119, 117, 116, 120, 118, 116, 122, 119, 121, 123, 117, 116, 117, 123, 122, 123, 121, 120, 122]
                    rel material:binding = </Root/offFile/_materials/maniglia_005>
                    normal3f[] normals = [(0.12959349, -0.9830621, -0.12959349), (0.1295935, -0.9830621, 0.12959348), (-0.12959352, -0.9830621, 0.12959354), (-0.12959352, -0.9830621, -0.12959345), (0.9830621, 0.12959349, -0.12959349), (0.9830621, 0.12959349, 0.12959354), (0.9830621, -0.12959349, 0.1295935), (0.9830621, -0.12959349, -0.12959354), (0.12959354, 0.12959352, 0.9830621), (-0.12959352, 0.12959354, 0.9830621), (-0.12959352, -0.12959354, 0.9830621), (0.12959352, -0.12959354, 0.9830621), (-0.9830621, -0.12959349, -0.12959352), (-0.9830621, -0.12959349, 0.12959349), (-0.9830621, 0.12959349, 0.12959349), (-0.9830621, 0.12959349, -0.12959354), (-0.12959349, 0.9830621, -0.12959349), (-0.12959352, 0.9830621, 0.12959345), (0.12959349, 0.9830621, 0.12959349), (0.12959352, 0.9830621, -0.12959345), (-0.12959352, -0.12959354, -0.9830621), (-0.1215737, -0.49154732, -0.86232305), (-0.4473489, -0.4473488, -0.7744404), (-0.49154735, -0.12157369, -0.8623231), (-0.1215737, -0.49154732, -0.86232305), (-0.12157372, -0.8623231, -0.49154732), (-0.44734892, -0.77444047, -0.44734883), (-0.4473489, -0.4473488, -0.7744404), (-0.12959352, -0.9830621, -0.12959345), (-0.49154738, -0.8623231, -0.12157364), (-0.44734892, -0.77444047, -0.44734883), (-0.12157372, -0.8623231, -0.49154732), (-0.49154738, -0.8623231, -0.12157364), (-0.86232305, -0.49154732, -0.12157369), (-0.77444047, -0.44734877, -0.44734877), (-0.44734892, -0.77444047, -0.44734883), (-0.9830621, -0.12959349, -0.12959352), (-0.86232305, -0.12157369, -0.49154735), (-0.77444047, -0.44734877, -0.44734877), (-0.86232305, -0.49154732, -0.12157369), (-0.86232305, -0.12157369, -0.49154735), (-0.49154735, -0.12157369, -0.8623231), (-0.4473489, -0.4473488, -0.7744404), (-0.77444047, -0.44734877, -0.44734877), (-0.4473489, -0.4473488, -0.7744404), (-0.44734892, -0.77444047, -0.44734883), (-0.77444047, -0.44734877, -0.44734877), (-0.12959352, -0.9830621, 0.12959354), (-0.12157369, -0.86232305, 0.49154735), (-0.44734892, -0.77444035, 0.44734892), (-0.49154735, -0.8623231, 0.1215737), (-0.12157369, -0.86232305, 0.49154735), (-0.1215737, -0.49154738, 0.86232305), (-0.4473489, -0.4473488, 0.7744404), (-0.44734892, -0.77444035, 0.44734892), (-0.12959352, -0.12959354, 0.9830621), (-0.49154732, -0.12157372, 0.86232305), (-0.4473489, -0.4473488, 0.7744404), (-0.1215737, -0.49154738, 0.86232305), (-0.49154732, -0.12157372, 0.86232305), (-0.86232305, -0.1215737, 0.49154735), (-0.77444047, -0.44734877, 0.4473489), (-0.4473489, -0.4473488, 0.7744404), (-0.9830621, -0.12959349, 0.12959349), (-0.862323, -0.49154738, 0.121573694), (-0.77444047, -0.44734877, 0.4473489), (-0.86232305, -0.1215737, 0.49154735), (-0.862323, -0.49154738, 0.121573694), (-0.49154735, -0.8623231, 0.1215737), (-0.44734892, -0.77444035, 0.44734892), (-0.77444047, -0.44734877, 0.4473489), (-0.44734892, -0.77444035, 0.44734892), (-0.4473489, -0.4473488, 0.7744404), (-0.77444047, -0.44734877, 0.4473489), (-0.12959354, 0.12959352, -0.9830621), (-0.49154735, 0.1215737, -0.8623231), (-0.44734892, 0.44734892, -0.77444035), (-0.121573694, 0.49154732, -0.86232305), (-0.49154735, 0.1215737, -0.8623231), (-0.86232305, 0.1215737, -0.49154744), (-0.7744404, 0.4473489, -0.4473488), (-0.44734892, 0.44734892, -0.77444035), (-0.9830621, 0.12959349, -0.12959354), (-0.86232305, 0.49154732, -0.121573746), (-0.7744404, 0.4473489, -0.4473488), (-0.86232305, 0.1215737, -0.49154744), (-0.86232305, 0.49154732, -0.121573746), (-0.49154732, 0.86232305, -0.1215737), (-0.4473489, 0.77444047, -0.44734877), (-0.7744404, 0.4473489, -0.4473488), (-0.12959349, 0.9830621, -0.12959349), (-0.12157369, 0.8623231, -0.49154735), (-0.4473489, 0.77444047, -0.44734877), (-0.49154732, 0.86232305, -0.1215737), (-0.12157369, 0.8623231, -0.49154735), (-0.121573694, 0.49154732, -0.86232305), (-0.44734892, 0.44734892, -0.77444035), (-0.4473489, 0.77444047, -0.44734877), (-0.44734892, 0.44734892, -0.77444035), (-0.7744404, 0.4473489, -0.4473488), (-0.4473489, 0.77444047, -0.44734877), (-0.12959352, 0.12959354, 0.9830621), (-0.1215737, 0.49154732, 0.86232305), (-0.4473489, 0.4473488, 0.7744404), (-0.49154735, 0.12157369, 0.8623231), (-0.1215737, 0.49154732, 0.86232305), (-0.12157372, 0.8623231, 0.49154732), (-0.44734892, 0.77444047, 0.44734883), (-0.4473489, 0.4473488, 0.7744404), (-0.12959352, 0.9830621, 0.12959345), (-0.49154735, 0.8623231, 0.121573634), (-0.44734892, 0.77444047, 0.44734883), (-0.12157372, 0.8623231, 0.49154732), (-0.49154735, 0.8623231, 0.121573634), (-0.8623231, 0.49154732, 0.12157367), (-0.77444047, 0.44734877, 0.44734877), (-0.44734892, 0.77444047, 0.44734883), (-0.9830621, 0.12959349, 0.12959349), (-0.86232305, 0.12157369, 0.49154735), (-0.77444047, 0.44734877, 0.44734877), (-0.8623231, 0.49154732, 0.12157367), (-0.86232305, 0.12157369, 0.49154735), (-0.49154735, 0.12157369, 0.8623231), (-0.4473489, 0.4473488, 0.7744404), (-0.77444047, 0.44734877, 0.44734877), (-0.4473489, 0.4473488, 0.7744404), (-0.44734892, 0.77444047, 0.44734883), (-0.77444047, 0.44734877, 0.44734877), (0.12959354, -0.12959352, -0.9830621), (0.49154735, -0.1215737, -0.8623231), (0.44734892, -0.44734892, -0.77444035), (0.121573694, -0.49154732, -0.86232305), (0.49154735, -0.1215737, -0.8623231), (0.86232305, -0.1215737, -0.49154744), (0.7744404, -0.4473489, -0.4473488), (0.44734892, -0.44734892, -0.77444035), (0.9830621, -0.12959349, -0.12959354), (0.86232305, -0.49154732, -0.121573746), (0.7744404, -0.4473489, -0.4473488), (0.86232305, -0.1215737, -0.49154744), (0.86232305, -0.49154732, -0.121573746), (0.49154732, -0.86232305, -0.1215737), (0.4473489, -0.77444047, -0.44734877), (0.7744404, -0.4473489, -0.4473488), (0.12959349, -0.9830621, -0.12959349), (0.12157369, -0.8623231, -0.49154735), (0.4473489, -0.77444047, -0.44734877), (0.49154732, -0.86232305, -0.1215737), (0.12157369, -0.8623231, -0.49154735), (0.121573694, -0.49154732, -0.86232305), (0.44734892, -0.44734892, -0.77444035), (0.4473489, -0.77444047, -0.44734877), (0.44734892, -0.44734892, -0.77444035), (0.7744404, -0.4473489, -0.4473488), (0.4473489, -0.77444047, -0.44734877), (0.12959352, -0.12959354, 0.9830621), (0.12157369, -0.49154738, 0.86232305), (0.4473489, -0.4473488, 0.7744404), (0.49154735, -0.12157369, 0.8623231), (0.12157369, -0.49154738, 0.86232305), (0.12157369, -0.8623231, 0.49154732), (0.44734892, -0.77444047, 0.44734883), (0.4473489, -0.4473488, 0.7744404), (0.1295935, -0.9830621, 0.12959348), (0.49154735, -0.8623231, 0.121573634), (0.44734892, -0.77444047, 0.44734883), (0.12157369, -0.8623231, 0.49154732), (0.49154735, -0.8623231, 0.121573634), (0.8623231, -0.49154732, 0.12157367), (0.77444047, -0.44734877, 0.44734877), (0.44734892, -0.77444047, 0.44734883), (0.9830621, -0.12959349, 0.1295935), (0.86232305, -0.12157369, 0.49154735), (0.77444047, -0.44734877, 0.44734877), (0.8623231, -0.49154732, 0.12157367), (0.86232305, -0.12157369, 0.49154735), (0.49154735, -0.12157369, 0.8623231), (0.4473489, -0.4473488, 0.7744404), (0.77444047, -0.44734877, 0.44734877), (0.4473489, -0.4473488, 0.7744404), (0.44734892, -0.77444047, 0.44734883), (0.77444047, -0.44734877, 0.44734877), (0.12959352, 0.12959354, -0.9830621), (0.1215737, 0.49154732, -0.86232305), (0.4473489, 0.4473488, -0.7744404), (0.49154735, 0.12157369, -0.8623231), (0.1215737, 0.49154732, -0.86232305), (0.12157372, 0.8623231, -0.49154732), (0.44734892, 0.77444047, -0.44734883), (0.4473489, 0.4473488, -0.7744404), (0.12959352, 0.9830621, -0.12959345), (0.49154735, 0.8623231, -0.12157364), (0.44734892, 0.77444047, -0.44734883), (0.12157372, 0.8623231, -0.49154732), (0.49154735, 0.8623231, -0.12157364), (0.8623231, 0.49154732, -0.12157367), (0.77444047, 0.44734877, -0.44734877), (0.44734892, 0.77444047, -0.44734883), (0.9830621, 0.12959349, -0.12959349), (0.86232305, 0.12157369, -0.49154735), (0.77444047, 0.44734877, -0.44734877), (0.8623231, 0.49154732, -0.12157367), (0.86232305, 0.12157369, -0.49154735), (0.49154735, 0.12157369, -0.8623231), (0.4473489, 0.4473488, -0.7744404), (0.77444047, 0.44734877, -0.44734877), (0.4473489, 0.4473488, -0.7744404), (0.44734892, 0.77444047, -0.44734883), (0.77444047, 0.44734877, -0.44734877), (0.12959354, 0.12959352, 0.9830621), (0.49154735, 0.1215737, 0.8623231), (0.44734892, 0.44734892, 0.77444035), (0.121573694, 0.49154732, 0.86232305), (0.49154735, 0.1215737, 0.8623231), (0.86232305, 0.1215737, 0.49154744), (0.7744404, 0.4473489, 0.4473488), (0.44734892, 0.44734892, 0.77444035), (0.9830621, 0.12959349, 0.12959354), (0.86232305, 0.49154732, 0.121573746), (0.7744404, 0.4473489, 0.4473488), (0.86232305, 0.1215737, 0.49154744), (0.86232305, 0.49154732, 0.121573746), (0.49154732, 0.86232305, 0.1215737), (0.4473489, 0.77444047, 0.44734877), (0.7744404, 0.4473489, 0.4473488), (0.12959349, 0.9830621, 0.12959349), (0.12157369, 0.8623231, 0.49154735), (0.4473489, 0.77444047, 0.44734877), (0.49154732, 0.86232305, 0.1215737), (0.12157369, 0.8623231, 0.49154735), (0.121573694, 0.49154732, 0.86232305), (0.44734892, 0.44734892, 0.77444035), (0.4473489, 0.77444047, 0.44734877), (0.44734892, 0.44734892, 0.77444035), (0.7744404, 0.4473489, 0.4473488), (0.4473489, 0.77444047, 0.44734877), (-0.12959354, 0.12959352, -0.9830621), (-0.12959352, -0.12959354, -0.9830621), (-0.49154735, -0.12157369, -0.8623231), (-0.49154735, 0.1215737, -0.8623231), (-0.49154735, 0.1215737, -0.8623231), (-0.49154735, -0.12157369, -0.8623231), (-0.86232305, -0.12157369, -0.49154735), (-0.86232305, 0.1215737, -0.49154744), (-0.86232305, 0.1215737, -0.49154744), (-0.86232305, -0.12157369, -0.49154735), (-0.9830621, -0.12959349, -0.12959352), (-0.9830621, 0.12959349, -0.12959354), (-0.12959352, -0.9830621, -0.12959345), (-0.12959352, -0.9830621, 0.12959354), (-0.49154735, -0.8623231, 0.1215737), (-0.49154738, -0.8623231, -0.12157364), (-0.49154738, -0.8623231, -0.12157364), (-0.49154735, -0.8623231, 0.1215737), (-0.862323, -0.49154738, 0.121573694), (-0.86232305, -0.49154732, -0.12157369), (-0.86232305, -0.49154732, -0.12157369), (-0.862323, -0.49154738, 0.121573694), (-0.9830621, -0.12959349, 0.12959349), (-0.9830621, -0.12959349, -0.12959352), (-0.12959352, -0.12959354, 0.9830621), (-0.12959352, 0.12959354, 0.9830621), (-0.49154735, 0.12157369, 0.8623231), (-0.49154732, -0.12157372, 0.86232305), (-0.49154732, -0.12157372, 0.86232305), (-0.49154735, 0.12157369, 0.8623231), (-0.86232305, 0.12157369, 0.49154735), (-0.86232305, -0.1215737, 0.49154735), (-0.86232305, -0.1215737, 0.49154735), (-0.86232305, 0.12157369, 0.49154735), (-0.9830621, 0.12959349, 0.12959349), (-0.9830621, -0.12959349, 0.12959349), (-0.12959352, 0.9830621, 0.12959345), (-0.12959349, 0.9830621, -0.12959349), (-0.49154732, 0.86232305, -0.1215737), (-0.49154735, 0.8623231, 0.121573634), (-0.49154735, 0.8623231, 0.121573634), (-0.49154732, 0.86232305, -0.1215737), (-0.86232305, 0.49154732, -0.121573746), (-0.8623231, 0.49154732, 0.12157367), (-0.8623231, 0.49154732, 0.12157367), (-0.86232305, 0.49154732, -0.121573746), (-0.9830621, 0.12959349, -0.12959354), (-0.9830621, 0.12959349, 0.12959349), (0.12959352, 0.12959354, -0.9830621), (-0.12959354, 0.12959352, -0.9830621), (-0.121573694, 0.49154732, -0.86232305), (0.1215737, 0.49154732, -0.86232305), (0.1215737, 0.49154732, -0.86232305), (-0.121573694, 0.49154732, -0.86232305), (-0.12157369, 0.8623231, -0.49154735), (0.12157372, 0.8623231, -0.49154732), (0.12157372, 0.8623231, -0.49154732), (-0.12157369, 0.8623231, -0.49154735), (-0.12959349, 0.9830621, -0.12959349), (0.12959352, 0.9830621, -0.12959345), (-0.12959352, 0.12959354, 0.9830621), (0.12959354, 0.12959352, 0.9830621), (0.121573694, 0.49154732, 0.86232305), (-0.1215737, 0.49154732, 0.86232305), (-0.1215737, 0.49154732, 0.86232305), (0.121573694, 0.49154732, 0.86232305), (0.12157369, 0.8623231, 0.49154735), (-0.12157372, 0.8623231, 0.49154732), (-0.12157372, 0.8623231, 0.49154732), (0.12157369, 0.8623231, 0.49154735), (0.12959349, 0.9830621, 0.12959349), (-0.12959352, 0.9830621, 0.12959345), (0.9830621, 0.12959349, 0.12959354), (0.9830621, 0.12959349, -0.12959349), (0.8623231, 0.49154732, -0.12157367), (0.86232305, 0.49154732, 0.121573746), (0.86232305, 0.49154732, 0.121573746), (0.8623231, 0.49154732, -0.12157367), (0.49154735, 0.8623231, -0.12157364), (0.49154732, 0.86232305, 0.1215737), (0.49154732, 0.86232305, 0.1215737), (0.49154735, 0.8623231, -0.12157364), (0.12959352, 0.9830621, -0.12959345), (0.12959349, 0.9830621, 0.12959349), (0.12959354, -0.12959352, -0.9830621), (0.12959352, 0.12959354, -0.9830621), (0.49154735, 0.12157369, -0.8623231), (0.49154735, -0.1215737, -0.8623231), (0.49154735, -0.1215737, -0.8623231), (0.49154735, 0.12157369, -0.8623231), (0.86232305, 0.12157369, -0.49154735), (0.86232305, -0.1215737, -0.49154744), (0.86232305, -0.1215737, -0.49154744), (0.86232305, 0.12157369, -0.49154735), (0.9830621, 0.12959349, -0.12959349), (0.9830621, -0.12959349, -0.12959354), (0.12959354, 0.12959352, 0.9830621), (0.12959352, -0.12959354, 0.9830621), (0.49154735, -0.12157369, 0.8623231), (0.49154735, 0.1215737, 0.8623231), (0.49154735, 0.1215737, 0.8623231), (0.49154735, -0.12157369, 0.8623231), (0.86232305, -0.12157369, 0.49154735), (0.86232305, 0.1215737, 0.49154744), (0.86232305, 0.1215737, 0.49154744), (0.86232305, -0.12157369, 0.49154735), (0.9830621, -0.12959349, 0.1295935), (0.9830621, 0.12959349, 0.12959354), (0.1295935, -0.9830621, 0.12959348), (0.12959349, -0.9830621, -0.12959349), (0.49154732, -0.86232305, -0.1215737), (0.49154735, -0.8623231, 0.121573634), (0.49154735, -0.8623231, 0.121573634), (0.49154732, -0.86232305, -0.1215737), (0.86232305, -0.49154732, -0.121573746), (0.8623231, -0.49154732, 0.12157367), (0.8623231, -0.49154732, 0.12157367), (0.86232305, -0.49154732, -0.121573746), (0.9830621, -0.12959349, -0.12959354), (0.9830621, -0.12959349, 0.1295935), (-0.12959352, -0.12959354, -0.9830621), (0.12959354, -0.12959352, -0.9830621), (0.121573694, -0.49154732, -0.86232305), (-0.1215737, -0.49154732, -0.86232305), (-0.1215737, -0.49154732, -0.86232305), (0.121573694, -0.49154732, -0.86232305), (0.12157369, -0.8623231, -0.49154735), (-0.12157372, -0.8623231, -0.49154732), (-0.12157372, -0.8623231, -0.49154732), (0.12157369, -0.8623231, -0.49154735), (0.12959349, -0.9830621, -0.12959349), (-0.12959352, -0.9830621, -0.12959345), (0.12959352, -0.12959354, 0.9830621), (-0.12959352, -0.12959354, 0.9830621), (-0.1215737, -0.49154738, 0.86232305), (0.12157369, -0.49154738, 0.86232305), (0.12157369, -0.49154738, 0.86232305), (-0.1215737, -0.49154738, 0.86232305), (-0.12157369, -0.86232305, 0.49154735), (0.12157369, -0.8623231, 0.49154732), (0.12157369, -0.8623231, 0.49154732), (-0.12157369, -0.86232305, 0.49154735), (-0.12959352, -0.9830621, 0.12959354), (0.1295935, -0.9830621, 0.12959348), (-0.12959354, 0.12959352, -0.9830621), (0.12959352, 0.12959354, -0.9830621), (0.12959354, -0.12959352, -0.9830621), (-0.12959352, -0.12959354, -0.9830621), (-0.54504865, 0.83840436, 0), (-0.54504865, 0.83840436, 0), (-0.54504865, 0.83840436, 0), (-0.54504865, 0.83840436, 0), (-0.9999927, -0.003811302, 0), (-0.9999927, -0.003811302, 0), (-0.9999927, -0.003811302, 0), (-0.9999927, -0.003811302, 0), (0.999669, 0.025727162, 0), (0.999669, 0.025727162, 0), (0.999669, 0.025727162, 0), (0.999669, 0.025727162, 0), (0.9999927, 0.0038112993, 0), (0.9999927, 0.0038112993, 0), (0.9999927, 0.0038112993, 0), (0.9999927, 0.0038112993, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0.5450485, -0.8384046, 0), (0.5450485, -0.8384046, 0), (0.5450485, -0.8384046, 0), (0.5450485, -0.8384046, 0), (-0.05354779, 0.08236815, 0.9951623), (-0.05354779, 0.08236815, 0.9951623), (-0.05354779, 0.08236815, 0.9951623), (-0.05354779, 0.08236815, 0.9951623), (-0.05354779, 0.08236837, -0.9951623), (-0.05354779, 0.08236837, -0.9951623), (-0.05354779, 0.08236837, -0.9951623), (-0.05354779, 0.08236837, -0.9951623), (-0.99984676, 0.017504135, 0), (-0.99984676, 0.017504135, 0), (-0.99984676, 0.017504135, 0), (-0.99984676, 0.017504135, 0), (-0.99999267, -0.0038112998, 0), (-0.99999267, -0.0038112998, 0), (-0.99999267, -0.0038112998, 0), (-0.99999267, -0.0038112998, 0), (-0.5450479, 0.838405, 0), (-0.5450479, 0.838405, 0), (-0.5450479, 0.838405, 0), (-0.5450479, 0.838405, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0.99999267, 0.0038112982, 0), (0.99999267, 0.0038112982, 0), (0.99999267, 0.0038112982, 0), (0.99999267, 0.0038112982, 0), (0.9994904, -0.03192025, 0), (0.9994904, -0.03192025, 0), (0.9994904, -0.03192025, 0), (0.9994904, -0.03192025, 0), (0.9994904, -0.03192025, 0), (-0.9999927, -0.0038113005, 0), (-0.9999927, -0.0038113005, 0), (-0.9999927, -0.0038113005, 0), (-0.9999927, -0.0038113005, 0), (-0.5450477, 0.838405, 0), (-0.5450477, 0.838405, 0), (-0.5450477, 0.838405, 0), (-0.5450477, 0.838405, 0), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0.9999927, 0.0038112972, 0), (0.9999927, 0.0038112972, 0), (0.9999927, 0.0038112972, 0), (0.9999927, 0.0038112972, 0), (0.5450478, -0.838405, 0), (0.5450478, -0.838405, 0), (0.5450478, -0.838405, 0), (0.5450478, -0.838405, 0)] (
                        interpolation = "faceVarying"
                    )
                    point3f[] points = [(-0.27041465, -0.27041465, -1), (-0.27041465, -1, -0.27041465), (-1, -0.27041465, -0.27041465), (-0.27041465, -0.63472867, -0.90253013), (-0.63472867, -0.2704146, -0.90253013), (-0.61931086, -0.61931074, -0.8078509), (-0.63472867, -0.90253013, -0.2704146), (-0.27041465, -0.90253013, -0.63472867), (-0.6193108, -0.8078509, -0.61931074), (-0.9025302, -0.2704146, -0.63472867), (-0.9025302, -0.63472867, -0.2704146), (-0.80785096, -0.61931074, -0.61931074), (-0.27041465, -1, 0.27041465), (-0.27041465, -0.27041465, 1), (-1, -0.27041465, 0.27041465), (-0.27041465, -0.90253013, 0.63472867), (-0.63472867, -0.90253013, 0.2704146), (-0.61931086, -0.8078509, 0.61931074), (-0.63472867, -0.2704146, 0.90253013), (-0.27041465, -0.63472867, 0.90253013), (-0.6193108, -0.61931074, 0.8078509), (-0.9025302, -0.63472867, 0.2704146), (-0.9025302, -0.2704146, 0.63472867), (-0.80785096, -0.61931074, 0.61931074), (-0.27041465, 0.27041465, -1), (-1, 0.27041465, -0.27041465), (-0.27041465, 1, -0.27041465), (-0.63472867, 0.27041465, -0.90253013), (-0.2704146, 0.63472867, -0.90253013), (-0.61931074, 0.61931086, -0.8078509), (-0.90253013, 0.63472867, -0.2704146), (-0.90253013, 0.27041465, -0.63472867), (-0.8078509, 0.6193108, -0.61931074), (-0.2704146, 0.9025302, -0.63472867), (-0.63472867, 0.9025302, -0.2704146), (-0.61931074, 0.80785096, -0.61931074), (-0.27041465, 0.27041465, 1), (-0.27041465, 1, 0.27041465), (-1, 0.27041465, 0.27041465), (-0.27041465, 0.63472867, 0.90253013), (-0.63472867, 0.2704146, 0.90253013), (-0.61931086, 0.61931074, 0.8078509), (-0.63472867, 0.90253013, 0.2704146), (-0.27041465, 0.90253013, 0.63472867), (-0.6193108, 0.8078509, 0.61931074), (-0.9025302, 0.2704146, 0.63472867), (-0.9025302, 0.63472867, 0.2704146), (-0.80785096, 0.61931074, 0.61931074), (0.27041465, -0.27041465, -1), (1, -0.27041465, -0.27041465), (0.27041465, -1, -0.27041465), (0.63472867, -0.27041465, -0.90253013), (0.2704146, -0.63472867, -0.90253013), (0.61931074, -0.61931086, -0.8078509), (0.90253013, -0.63472867, -0.2704146), (0.90253013, -0.27041465, -0.63472867), (0.8078509, -0.6193108, -0.61931074), (0.2704146, -0.9025302, -0.63472867), (0.63472867, -0.9025302, -0.2704146), (0.61931074, -0.80785096, -0.61931074), (0.27041465, -0.27041465, 1), (0.27041465, -1, 0.27041465), (1, -0.27041465, 0.27041465), (0.27041465, -0.63472867, 0.90253013), (0.63472867, -0.2704146, 0.90253013), (0.61931086, -0.61931074, 0.8078509), (0.63472867, -0.90253013, 0.2704146), (0.27041465, -0.90253013, 0.63472867), (0.6193108, -0.8078509, 0.61931074), (0.9025302, -0.2704146, 0.63472867), (0.9025302, -0.63472867, 0.2704146), (0.80785096, -0.61931074, 0.61931074), (0.27041465, 0.27041465, -1), (0.27041465, 1, -0.27041465), (1, 0.27041465, -0.27041465), (0.27041465, 0.63472867, -0.90253013), (0.63472867, 0.2704146, -0.90253013), (0.61931086, 0.61931074, -0.8078509), (0.63472867, 0.90253013, -0.2704146), (0.27041465, 0.90253013, -0.63472867), (0.6193108, 0.8078509, -0.61931074), (0.9025302, 0.2704146, -0.63472867), (0.9025302, 0.63472867, -0.2704146), (0.80785096, 0.61931074, -0.61931074), (0.27041465, 0.27041465, 1), (1, 0.27041465, 0.27041465), (0.27041465, 1, 0.27041465), (0.63472867, 0.27041465, 0.90253013), (0.2704146, 0.63472867, 0.90253013), (0.61931074, 0.61931086, 0.8078509), (0.90253013, 0.63472867, 0.2704146), (0.90253013, 0.27041465, 0.63472867), (0.8078509, 0.6193108, 0.61931074), (0.2704146, 0.9025302, 0.63472867), (0.63472867, 0.9025302, 0.2704146), (0.61931074, 0.80785096, 0.61931074), (3.1727264, 127.7104, 19.905159), (3.1727264, 127.7104, -7.427863), (-3.9306934, 123.09245, 19.905159), (-3.9306934, 123.09245, -7.427863), (3.6087635, 13.30489, 19.905159), (3.6087635, 13.30489, -7.427863), (-3.4946563, 8.686939, 19.905159), (-3.4946563, 8.686939, -7.427863), (-3.5685635, 4.465328, -7.773304), (-3.5685635, 4.465328, 20.250599), (3.7144055, 9.200001, 20.250599), (3.7144055, 9.200001, -7.773304), (0.17689772, 0.5890703, 0.31617972), (0.17689772, 0.5890703, -0.45698783), (0.28931114, 0.6621504, 0.31617972), (0.28931114, 0.6621504, -0.45698783), (0.26583844, 6.820814, 0.31617972), (0.26583844, 6.820814, -0.45698783), (0.15342504, 6.747734, 0.31617972), (0.15342504, 6.747734, -0.45698783), (-0.35880023, 0.48451757, 0.26320118), (-0.35880023, 0.48451757, -0.5099663), (-0.2463868, 0.55759764, 0.26320118), (-0.2463868, 0.55759764, -0.5099663), (-0.26902455, 6.497193, 0.26320118), (-0.26902455, 6.497193, -0.5099663), (-0.38143796, 6.424113, 0.26320118), (-0.38143796, 6.424113, -0.5099663)]
                    bool[] primvars:sharp_face = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] (
                        interpolation = "uniform"
                    )
                    texCoord2f[] primvars:UVMap = [(0.7794452, 0.78106683), (0.7750561, 0.78106683), (0.7750561, 0.77667785), (0.7794452, 0.77667785), (0.789706, 0.7810669), (0.789706, 0.77667785), (0.794095, 0.77667785), (0.794095, 0.7810669), (0.7772667, 0.79054505), (0.77726656, 0.794934), (0.77287763, 0.794934), (0.77287775, 0.79054505), (0.7897613, 0.79571694), (0.7853723, 0.79571694), (0.7853723, 0.79132795), (0.7897613, 0.79132795), (0.8000634, 0.79354227), (0.7956743, 0.79354227), (0.7956743, 0.7891532), (0.8000634, 0.7891532), (0.80757105, 0.78516144), (0.8046202, 0.7851578), (0.80475074, 0.7823228), (0.8075766, 0.7822013), (0.784575, 0.77667785), (0.7824017, 0.77667785), (0.7822766, 0.77384645), (0.7838066, 0.77384645), (0.7794452, 0.77667785), (0.7794452, 0.77372134), (0.7822766, 0.77384645), (0.7824017, 0.77667785), (0.7794452, 0.77372134), (0.7794452, 0.77154803), (0.7822766, 0.7723164), (0.7822766, 0.77384645), (0.7897613, 0.79571694), (0.7927178, 0.7957166), (0.7925927, 0.7985476), (0.7897613, 0.7986731), (0.807592, 0.780018), (0.8075766, 0.7822013), (0.80475074, 0.7823228), (0.8047615, 0.78078574), (0.7838066, 0.77384645), (0.7822766, 0.77384645), (0.7822766, 0.7723164), (0.7750561, 0.77667785), (0.7720996, 0.77667785), (0.7722247, 0.77384645), (0.7750561, 0.77372134), (0.7720996, 0.77667785), (0.7699263, 0.77667785), (0.7706947, 0.77384645), (0.7722247, 0.77384645), (0.77287763, 0.794934), (0.7728827, 0.7978939), (0.7700564, 0.797772), (0.7699263, 0.7949374), (0.7728827, 0.7978939), (0.7728969, 0.80007637), (0.7700664, 0.7993086), (0.7700564, 0.797772), (0.7853723, 0.79571694), (0.7853723, 0.7986731), (0.7825409, 0.7985476), (0.78241575, 0.7957166), (0.7750561, 0.77154803), (0.7750561, 0.77372134), (0.7722247, 0.77384645), (0.7722247, 0.7723164), (0.7722247, 0.77384645), (0.7706947, 0.77384645), (0.7722247, 0.7723164), (0.81196, 0.78516144), (0.81196547, 0.7822013), (0.8148023, 0.7823228), (0.81492203, 0.7851578), (0.81196547, 0.7822013), (0.81198084, 0.780018), (0.81481314, 0.78078574), (0.8148023, 0.7823228), (0.7897613, 0.79132795), (0.7897613, 0.788371), (0.7925927, 0.7884958), (0.7927178, 0.7913276), (0.7897613, 0.788371), (0.7897613, 0.7861967), (0.7925927, 0.786965), (0.7925927, 0.7884958), (0.8000634, 0.79354227), (0.8030199, 0.79354227), (0.8028948, 0.79637367), (0.8000634, 0.7964988), (0.8171107, 0.7851477), (0.81492203, 0.7851578), (0.8148023, 0.7823228), (0.8163432, 0.7823158), (0.8148023, 0.7823228), (0.81481314, 0.78078574), (0.8163432, 0.7823158), (0.77726656, 0.794934), (0.7802282, 0.7949374), (0.78010803, 0.797772), (0.7772716, 0.7978939), (0.7802282, 0.7949374), (0.7824156, 0.7949466), (0.78164804, 0.79777855), (0.78010803, 0.797772), (0.7956743, 0.79354227), (0.7956743, 0.7964988), (0.7928429, 0.79637367), (0.7927178, 0.79354227), (0.7853723, 0.7861967), (0.7853723, 0.788371), (0.7825409, 0.7884958), (0.7825409, 0.786965), (0.7853723, 0.79132795), (0.78241575, 0.7913276), (0.7825409, 0.7884958), (0.7853723, 0.788371), (0.7772858, 0.80007637), (0.7772716, 0.7978939), (0.78010803, 0.797772), (0.780118, 0.7993086), (0.78010803, 0.797772), (0.78164804, 0.79777855), (0.780118, 0.7993086), (0.80757123, 0.7895504), (0.80757695, 0.79250324), (0.80475104, 0.79237455), (0.8046204, 0.7895467), (0.79409385, 0.7861967), (0.7940947, 0.7840234), (0.7969258, 0.7838983), (0.7969252, 0.78542835), (0.794095, 0.7810669), (0.7970512, 0.7810669), (0.7969258, 0.7838983), (0.7940947, 0.7840234), (0.7794452, 0.7861967), (0.7794452, 0.7840234), (0.7822766, 0.7838983), (0.7822766, 0.78542835), (0.7794452, 0.78106683), (0.7824017, 0.78106683), (0.7822766, 0.7838983), (0.7794452, 0.7840234), (0.7824017, 0.78106683), (0.784575, 0.78106683), (0.7838066, 0.7838983), (0.7822766, 0.7838983), (0.7838066, 0.7838983), (0.7822766, 0.78542835), (0.7822766, 0.7838983), (0.77287775, 0.79054505), (0.7699264, 0.7905484), (0.77005666, 0.78772026), (0.772883, 0.7875919), (0.7699263, 0.78106683), (0.7720996, 0.78106683), (0.7722247, 0.7838983), (0.7706947, 0.7838983), (0.7750561, 0.78106683), (0.7750561, 0.7840234), (0.7722247, 0.7838983), (0.7720996, 0.78106683), (0.7750561, 0.7840234), (0.7750561, 0.7861967), (0.7722247, 0.78542835), (0.7722247, 0.7838983), (0.794095, 0.77667785), (0.7940947, 0.77372134), (0.7969258, 0.77384645), (0.7970512, 0.77667785), (0.7940947, 0.77372134), (0.79409385, 0.77154803), (0.7969252, 0.7723164), (0.7969258, 0.77384645), (0.7706947, 0.7838983), (0.7722247, 0.7838983), (0.7722247, 0.78542835), (0.8119601, 0.7895504), (0.81492215, 0.7895467), (0.8148026, 0.79237455), (0.8119658, 0.79250324), (0.81492215, 0.7895467), (0.8171109, 0.7895367), (0.81634355, 0.7923675), (0.8148026, 0.79237455), (0.8000634, 0.7891532), (0.8000634, 0.7861967), (0.8028948, 0.7863218), (0.8030199, 0.7891532), (0.78457505, 0.7810669), (0.7867492, 0.7810669), (0.786874, 0.7838983), (0.78534335, 0.7838983), (0.789706, 0.7810669), (0.7897057, 0.7840234), (0.786874, 0.7838983), (0.7867492, 0.7810669), (0.7897057, 0.7840234), (0.78970486, 0.7861967), (0.7868734, 0.78542835), (0.786874, 0.7838983), (0.8148026, 0.79237455), (0.81634355, 0.7923675), (0.81481355, 0.79389757), (0.7772667, 0.79054505), (0.7772719, 0.7875919), (0.7801083, 0.78772026), (0.7802283, 0.7905484), (0.78970486, 0.77154803), (0.7897057, 0.77372134), (0.786874, 0.77384645), (0.7868734, 0.7723164), (0.789706, 0.77667785), (0.7867492, 0.77667785), (0.786874, 0.77384645), (0.7897057, 0.77372134), (0.7867492, 0.77667785), (0.78457505, 0.77667785), (0.78534335, 0.77384645), (0.786874, 0.77384645), (0.7956743, 0.7891532), (0.7927178, 0.7891532), (0.7928429, 0.7863218), (0.7956743, 0.7861967), (0.78241575, 0.7905576), (0.7802283, 0.7905484), (0.7801083, 0.78772026), (0.78164834, 0.7877268), (0.7801083, 0.78772026), (0.78011835, 0.78619677), (0.78164834, 0.7877268), (0.81196, 0.78516144), (0.80757105, 0.78516144), (0.8075766, 0.7822013), (0.81196547, 0.7822013), (0.81196547, 0.7822013), (0.8075766, 0.7822013), (0.807592, 0.780018), (0.81198084, 0.780018), (0.7927178, 0.7913276), (0.7927178, 0.7957166), (0.7897613, 0.79571694), (0.7897613, 0.79132795), (0.7794452, 0.77667785), (0.7750561, 0.77667785), (0.7750561, 0.77372134), (0.7794452, 0.77372134), (0.7794452, 0.77372134), (0.7750561, 0.77372134), (0.7750561, 0.77154803), (0.7794452, 0.77154803), (0.7897613, 0.7986731), (0.7853723, 0.7986731), (0.7853723, 0.79571694), (0.7897613, 0.79571694), (0.77287763, 0.794934), (0.77726656, 0.794934), (0.7772716, 0.7978939), (0.7728827, 0.7978939), (0.7728827, 0.7978939), (0.7772716, 0.7978939), (0.7772858, 0.80007637), (0.7728969, 0.80007637), (0.78241575, 0.7957166), (0.78241575, 0.7913276), (0.7853723, 0.79132795), (0.7853723, 0.79571694), (0.7956743, 0.79354227), (0.8000634, 0.79354227), (0.8000634, 0.7964988), (0.7956743, 0.7964988), (0.7853723, 0.7861967), (0.7897613, 0.7861967), (0.7897613, 0.788371), (0.7853723, 0.788371), (0.7853723, 0.788371), (0.7897613, 0.788371), (0.7897613, 0.79132795), (0.7853723, 0.79132795), (0.8119601, 0.7895504), (0.81196, 0.78516144), (0.81492203, 0.7851578), (0.81492215, 0.7895467), (0.81492215, 0.7895467), (0.81492203, 0.7851578), (0.8171107, 0.7851477), (0.8171109, 0.7895367), (0.8030199, 0.7891532), (0.8030199, 0.79354227), (0.8000634, 0.79354227), (0.8000634, 0.7891532), (0.77726656, 0.794934), (0.7772667, 0.79054505), (0.7802283, 0.7905484), (0.7802282, 0.7949374), (0.7802282, 0.7949374), (0.7802283, 0.7905484), (0.78241575, 0.7905576), (0.7824156, 0.7949466), (0.7927178, 0.79354227), (0.7927178, 0.7891532), (0.7956743, 0.7891532), (0.7956743, 0.79354227), (0.789706, 0.77667785), (0.789706, 0.7810669), (0.7867492, 0.7810669), (0.7867492, 0.77667785), (0.7867492, 0.77667785), (0.7867492, 0.7810669), (0.78457505, 0.7810669), (0.78457505, 0.77667785), (0.7956743, 0.7861967), (0.8000634, 0.7861967), (0.8000634, 0.7891532), (0.7956743, 0.7891532), (0.80757123, 0.7895504), (0.8119601, 0.7895504), (0.8119658, 0.79250324), (0.80757695, 0.79250324), (0.79409385, 0.7861967), (0.78970486, 0.7861967), (0.7897057, 0.7840234), (0.7940947, 0.7840234), (0.7940947, 0.7840234), (0.7897057, 0.7840234), (0.789706, 0.7810669), (0.794095, 0.7810669), (0.7772667, 0.79054505), (0.77287775, 0.79054505), (0.772883, 0.7875919), (0.7772719, 0.7875919), (0.78970486, 0.77154803), (0.79409385, 0.77154803), (0.7940947, 0.77372134), (0.7897057, 0.77372134), (0.7897057, 0.77372134), (0.7940947, 0.77372134), (0.794095, 0.77667785), (0.789706, 0.77667785), (0.7750561, 0.78106683), (0.7794452, 0.78106683), (0.7794452, 0.7840234), (0.7750561, 0.7840234), (0.7750561, 0.7840234), (0.7794452, 0.7840234), (0.7794452, 0.7861967), (0.7750561, 0.7861967), (0.7970512, 0.77667785), (0.7970512, 0.7810669), (0.794095, 0.7810669), (0.794095, 0.77667785), (0.80757105, 0.78516144), (0.80757123, 0.7895504), (0.8046204, 0.7895467), (0.8046202, 0.7851578), (0.784575, 0.77667785), (0.784575, 0.78106683), (0.7824017, 0.78106683), (0.7824017, 0.77667785), (0.7824017, 0.77667785), (0.7824017, 0.78106683), (0.7794452, 0.78106683), (0.7794452, 0.77667785), (0.77287775, 0.79054505), (0.77287763, 0.794934), (0.7699263, 0.7949374), (0.7699264, 0.7905484), (0.7699263, 0.78106683), (0.7699263, 0.77667785), (0.7720996, 0.77667785), (0.7720996, 0.78106683), (0.7720996, 0.78106683), (0.7720996, 0.77667785), (0.7750561, 0.77667785), (0.7750561, 0.78106683), (0.81196, 0.78516144), (0.8119601, 0.7895504), (0.80757123, 0.7895504), (0.80757105, 0.78516144), (0.57171357, 0.2274231), (0.57171357, 0.4492395), (0.514067, 0.4492395), (0.514067, 0.22742309), (0.0028034349, 2.1165344e-10), (0.22461985, 1.6958326e-8), (0.22461978, 0.92843634), (0.0028033648, 0.92843634), (0.23022647, 0.92843944), (0.45204288, 0.9284394), (0.45484623, 0.96175224), (0.22742312, 0.96175224), (0.45204288, 0.9284394), (0.23022647, 0.92843944), (0.2302264, -1.7381609e-8), (0.45204282, -3.4128284e-8), (0.4548463, 0.9626999), (0.45553923, 0.03427541), (0.5132999, 0.07157553), (0.51260686, 1), (0.57317066, 3.6719e-9), (0.5731706, 0.22742312), (0.51406693, 0.2274231), (0.514067, -1.4951066e-9), (0.5132999, 0.07157553), (0.45553923, 0.03427541), (0.45484632, -7.802089e-10), (0.51406693, 0.038242903), (0.5424863, 0.46841562), (0.5424863, 0.5371731), (0.51406693, 0.5197349), (0.51406693, 0.44923952), (0.0028033648, 0.92843634), (0.22461978, 0.92843634), (0.22742313, 0.9626964), (4.712229e-9, 0.9626964), (0.5424863, 0.49981183), (0.54876083, 0.49981183), (0.54876083, 0.5497913), (0.5424863, 0.5497913), (0.5421041, 0.53717303), (0.5421041, 0.54344755), (0.5411918, 0.54344755), (0.5411918, 0.53717303), (0.55686444, 0.4492394), (0.55686444, 0.49921808), (0.5559499, 0.4998077), (0.5559499, 0.449829), (0.55594987, 0.4498291), (0.55594987, 0.49980795), (0.55503535, 0.49921834), (0.55503535, 0.4492395), (0.5424863, 0.44923952), (0.54876083, 0.44923952), (0.54876083, 0.49921915), (0.5424863, 0.49921915), (0.5424863, 0.4998119), (0.5424863, 0.49921915), (0.5424863, 0.44923952), (0.54876083, 0.49921915), (0.54876083, 0.4998119), (0.54876083, 0.49744132), (0.55503535, 0.49744132), (0.55503535, 0.545643), (0.54876083, 0.545643), (0.5421041, 0.54344755), (0.5421041, 0.5497221), (0.5411918, 0.5497221), (0.5411918, 0.54344755), (0.5586935, 0.44923955), (0.5586935, 0.49744043), (0.557779, 0.49803), (0.557779, 0.44982913), (0.5577789, 0.44982907), (0.5577789, 0.49803013), (0.5568644, 0.49744055), (0.5568644, 0.44923946), (0.54876083, 0.44923952), (0.55503535, 0.44923952), (0.55503535, 0.49744135), (0.54876083, 0.49744135), (0.55594766, 0.5060825), (0.55503535, 0.5060825), (0.55503535, 0.49980795), (0.55594766, 0.49980795)] (
                        interpolation = "faceVarying"
                    )
                    uniform token subdivisionScheme = "none"
                }
            }

            over "Cube_012"
            {
                quatf xformOp:orient = (2.5348657e-8, 0.7220181, -0.69187415, -2.4290369e-8)
                float3 xformOp:scale = (0.26206735, 0.017210025, 0.021472847)
                float3 xformOp:translate = (1.1522667, 0.011799812, 0.7301498)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            over "Cube_001"
            {
                over "Cube_002" (
                    active = false
                )
                {
                }
            }
        }

        over "_materials"
        {
            over "lambert3SG"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex

                over "Principled_BSDF"
                {
                    color3f inputs:emissiveColor = (0.28988805, 0.19824174, 0.1287759) (
                        colorSpace = "srgb_displayp3"
                    )
                }
            }

            def Scope "_materials" (
                references = </Root/offFile/_materials>
            )
            {
                float2 ui:nodegraph:node:pos = (1.4218903, 145.25)
                int ui:nodegraph:node:stackingOrder = 1

                def Material "Corkboard"
                {
                    token outputs:surface.connect = </Root/offFile/_materials/_materials/Corkboard/Principled_BSDF.outputs:surface>

                    def Shader "Principled_BSDF"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        float inputs:clearcoat = 0
                        float inputs:clearcoatRoughness = 0.03
                        color3f inputs:diffuseColor.connect = </Root/offFile/_materials/_materials/Corkboard/Image_Texture.outputs:rgb>
                        color3f inputs:emissiveColor = (0, 0, 0)
                        float inputs:ior = 1.5
                        float inputs:metallic = 0
                        float inputs:opacity = 1
                        float inputs:roughness = 1
                        float inputs:specular = 0.5
                        token outputs:surface
                    }

                    def Shader "Image_Texture"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/Corkboard_baseColor.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/Corkboard/uvmap.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }

                    def Shader "uvmap"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname = "st0"
                        float2 outputs:result
                    }
                }

                def Material "Pot_Plant"
                {
                    token outputs:surface.connect = </Root/offFile/_materials/_materials/Pot_Plant/Principled_BSDF.outputs:surface>

                    def Shader "Principled_BSDF"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        float inputs:clearcoat = 0
                        float inputs:clearcoatRoughness = 0.03
                        color3f inputs:diffuseColor.connect = </Root/offFile/_materials/_materials/Pot_Plant/Image_Texture.outputs:rgb>
                        color3f inputs:emissiveColor = (0, 0, 0)
                        float inputs:ior = 1.5
                        float inputs:metallic = 0
                        float inputs:opacity = 1
                        float inputs:roughness = 1
                        float inputs:specular = 0.5
                        token outputs:surface
                    }

                    def Shader "Image_Texture"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/Pot_Plant_baseColor.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/Pot_Plant/uvmap.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }

                    def Shader "uvmap"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname = "st0"
                        float2 outputs:result
                    }
                }

                def Material "Mesh_Basket"
                {
                    token outputs:surface.connect = </Root/offFile/_materials/_materials/Mesh_Basket/Principled_BSDF.outputs:surface>

                    def Shader "Principled_BSDF"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        float inputs:clearcoat = 0
                        float inputs:clearcoatRoughness = 0.03
                        color3f inputs:diffuseColor.connect = </Root/offFile/_materials/_materials/Mesh_Basket/Image_Texture.outputs:rgb>
                        color3f inputs:emissiveColor = (0, 0, 0)
                        float inputs:ior = 1.5
                        float inputs:metallic = 0
                        float inputs:opacity.connect = </Root/offFile/_materials/_materials/Mesh_Basket/Image_Texture.outputs:a>
                        float inputs:roughness = 1
                        float inputs:specular = 0.5
                        token outputs:surface
                    }

                    def Shader "Image_Texture"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/Mesh_Basket_baseColor.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/Mesh_Basket/UV_Map.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float outputs:a
                        float3 outputs:rgb
                    }

                    def Shader "UV_Map"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname = "st0"
                        float2 outputs:result
                    }
                }

                def Material "Material_001"
                {
                    token outputs:surface.connect = </Root/offFile/_materials/_materials/Material_001/Principled_BSDF.outputs:surface>

                    def Shader "Principled_BSDF"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        float inputs:clearcoat = 0
                        float inputs:clearcoatRoughness = 0.03
                        color3f inputs:diffuseColor.connect = </Root/offFile/_materials/_materials/Material_001/Image_Texture.outputs:rgb>
                        float inputs:ior = 1.5
                        float inputs:metallic = 0
                        float inputs:opacity = 1
                        float inputs:roughness = 1
                        float inputs:specular = 0.5
                        token outputs:surface
                    }

                    def Shader "Image_Texture"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/boxWallDiffuse.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/Material_001/uvmap.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }

                    def Shader "uvmap"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname = "UVMap"
                        float2 outputs:result
                    }
                }

                def Material "Material_002"
                {
                    token outputs:surface.connect = </Root/offFile/_materials/_materials/Material_002/Principled_BSDF.outputs:surface>

                    def Shader "Principled_BSDF"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        float inputs:clearcoat = 0
                        float inputs:clearcoatRoughness = 0.03
                        color3f inputs:diffuseColor.connect = </Root/offFile/_materials/_materials/Material_002/Image_Texture.outputs:rgb>
                        float inputs:ior = 1.5
                        float inputs:metallic = 0.18409091
                        float3 inputs:normal.connect = </Root/offFile/_materials/_materials/Material_002/Image_Texture_001.outputs:rgb>
                        float inputs:opacity = 1
                        float inputs:roughness = 0.34318182
                        float inputs:specular = 0.5
                        token outputs:surface
                    }

                    def Shader "Image_Texture"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/wallframeDiffuse.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/Material_002/uvmap.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }

                    def Shader "uvmap"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname = "UVMap"
                        float2 outputs:result
                    }

                    def Shader "Image_Texture_001"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/wallframeNormal.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/Material_002/uvmap.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }
                }

                def Material "Material_003"
                {
                    token outputs:surface.connect = </Root/offFile/_materials/_materials/Material_003/Principled_BSDF.outputs:surface>

                    def Shader "Principled_BSDF"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        float inputs:clearcoat = 0
                        float inputs:clearcoatRoughness = 0.03
                        color3f inputs:diffuseColor.connect = </Root/offFile/_materials/_materials/Material_003/Image_Texture_001.outputs:rgb>
                        float inputs:ior = 1.5
                        float inputs:metallic = 0
                        float3 inputs:normal.connect = </Root/offFile/_materials/_materials/Material_003/Image_Texture_002.outputs:rgb>
                        float inputs:opacity = 1
                        float inputs:roughness = 1
                        float inputs:specular = 0.5
                        token outputs:surface
                    }

                    def Shader "Image_Texture_001"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/airventDiffuse.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/Material_003/uvmap.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }

                    def Shader "uvmap"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname = "UVMap"
                        float2 outputs:result
                    }

                    def Shader "Image_Texture_002"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/airventNormal.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/Material_003/uvmap.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }
                }

                def Material "Box"
                {
                    token outputs:surface.connect = </Root/offFile/_materials/_materials/Box/Principled_BSDF.outputs:surface>

                    def Shader "Principled_BSDF"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        float inputs:clearcoat = 0
                        float inputs:clearcoatRoughness = 0.03
                        color3f inputs:diffuseColor.connect = </Root/offFile/_materials/_materials/Box/Image_Texture.outputs:rgb>
                        float inputs:ior = 1
                        float inputs:metallic = 0
                        float inputs:opacity = 1
                        float inputs:roughness = 0.69003475
                        float inputs:specular = 0.5
                        token outputs:surface
                    }

                    def Shader "Image_Texture"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/boxbottdiffuse.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/Box/uvmap.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }

                    def Shader "uvmap"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname = "UVMap"
                        float2 outputs:result
                    }
                }

                def Material "Cactus"
                {
                    token outputs:surface.connect = </Root/offFile/_materials/_materials/Cactus/Principled_BSDF.outputs:surface>

                    def Shader "Principled_BSDF"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        float inputs:clearcoat = 0
                        float inputs:clearcoatRoughness = 0.03
                        color3f inputs:diffuseColor.connect = </Root/offFile/_materials/_materials/Cactus/Image_Texture.outputs:rgb>
                        float inputs:ior = 1
                        float inputs:metallic = 0
                        float inputs:opacity = 1
                        float inputs:roughness = 0.69003475
                        float inputs:specular = 0.5
                        token outputs:surface
                    }

                    def Shader "Image_Texture"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/cactusDiffuse.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/Cactus/uvmap.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }

                    def Shader "uvmap"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname = "UVMap"
                        float2 outputs:result
                    }
                }

                def Material "Table"
                {
                    token outputs:surface.connect = </Root/offFile/_materials/_materials/Table/Principled_BSDF.outputs:surface>

                    def Shader "Principled_BSDF"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        float inputs:clearcoat = 0
                        float inputs:clearcoatRoughness = 0.03
                        color3f inputs:diffuseColor.connect = </Root/offFile/_materials/_materials/Table/Image_Texture.outputs:rgb>
                        float inputs:ior = 1
                        float inputs:metallic = 0
                        float3 inputs:normal.connect = </Root/offFile/_materials/_materials/Table/Image_Texture_001.outputs:rgb>
                        float inputs:opacity = 1
                        float inputs:roughness = 0.69003475
                        float inputs:specular = 0.5
                        token outputs:surface
                    }

                    def Shader "Image_Texture"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/deskDiffuse.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/Table/uvmap.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }

                    def Shader "uvmap"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname = "UVMap"
                        float2 outputs:result
                    }

                    def Shader "Image_Texture_001"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/deskNormal.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/Table/uvmap.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }
                }

                def Material "Material_004"
                {
                    token outputs:surface.connect = </Root/offFile/_materials/_materials/Material_004/Principled_BSDF.outputs:surface>

                    def Shader "Principled_BSDF"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        float inputs:clearcoat = 0
                        float inputs:clearcoatRoughness = 0.24556886
                        color3f inputs:diffuseColor.connect = </Root/offFile/_materials/_materials/Material_004/Image_Texture.outputs:rgb>
                        float inputs:ior = 1.5
                        float inputs:metallic = 0
                        float inputs:opacity = 1
                        float inputs:roughness = 0.83233535
                        float inputs:specular = 0.5
                        token outputs:surface
                    }

                    def Shader "Image_Texture"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/shelfbigDiffuse.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/Material_004/uvmap.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }

                    def Shader "uvmap"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname = "UVMap"
                        float2 outputs:result
                    }
                }

                def Material "maniglia_005"
                {
                    token outputs:surface.connect = </Root/offFile/_materials/_materials/maniglia_005/Principled_BSDF.outputs:surface>

                    def Shader "Principled_BSDF"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        float inputs:clearcoat = 0
                        float inputs:clearcoatRoughness = 0.03
                        color3f inputs:diffuseColor.connect = </Root/offFile/_materials/_materials/maniglia_005/Image_Texture.outputs:rgb>
                        float inputs:ior = 1.5
                        float inputs:metallic = 0
                        float3 inputs:normal.connect = </Root/offFile/_materials/_materials/maniglia_005/Image_Texture_001.outputs:rgb>
                        float inputs:opacity = 1
                        float inputs:roughness = 0.5
                        float inputs:specular = 0.5
                        token outputs:surface
                    }

                    def Shader "Image_Texture"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/shelfDiffuse.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/maniglia_005/uvmap.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }

                    def Shader "uvmap"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname = "UVMap"
                        float2 outputs:result
                    }

                    def Shader "Image_Texture_001"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/shelfNormal.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/maniglia_005/uvmap.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }
                }

                def Material "Paper_Stack"
                {
                    token outputs:surface.connect = </Root/offFile/_materials/_materials/Paper_Stack/Principled_BSDF.outputs:surface>

                    def Shader "Principled_BSDF"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        float inputs:clearcoat = 0
                        float inputs:clearcoatRoughness = 0.03
                        color3f inputs:diffuseColor.connect = </Root/offFile/_materials/_materials/Paper_Stack/Image_Texture.outputs:rgb>
                        float inputs:ior = 1
                        float inputs:metallic = 0
                        float inputs:opacity = 1
                        float inputs:roughness = 0.69003475
                        float inputs:specular = 0.5
                        token outputs:surface
                    }

                    def Shader "Image_Texture"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/papersDiffuse.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/Paper_Stack/uvmap.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }

                    def Shader "uvmap"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname = "UVMap"
                        float2 outputs:result
                    }
                }

                def Material "Paper_Stack2"
                {
                    token outputs:surface.connect = </Root/offFile/_materials/_materials/Paper_Stack2/Principled_BSDF.outputs:surface>

                    def Shader "Principled_BSDF"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        float inputs:clearcoat = 0
                        float inputs:clearcoatRoughness = 0.03
                        color3f inputs:diffuseColor.connect = </Root/offFile/_materials/_materials/Paper_Stack2/Image_Texture.outputs:rgb>
                        float inputs:ior = 1
                        float inputs:metallic = 0
                        float inputs:opacity = 1
                        float inputs:roughness = 0.69003475
                        float inputs:specular = 0.5
                        token outputs:surface
                    }

                    def Shader "Image_Texture"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/paper2Diffuse.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/Paper_Stack2/uvmap.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }

                    def Shader "uvmap"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname = "UVMap"
                        float2 outputs:result
                    }
                }

                def Material "Shelf01"
                {
                    token outputs:surface.connect = </Root/offFile/_materials/_materials/Shelf01/Principled_BSDF.outputs:surface>

                    def Shader "Principled_BSDF"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        float inputs:clearcoat = 0
                        float inputs:clearcoatRoughness = 0.03
                        color3f inputs:diffuseColor.connect = </Root/offFile/_materials/_materials/Shelf01/Image_Texture.outputs:rgb>
                        float inputs:ior = 1
                        float inputs:metallic = 0
                        float inputs:opacity = 1
                        float inputs:roughness = 0.69003475
                        float inputs:specular = 0.5
                        token outputs:surface
                    }

                    def Shader "Image_Texture"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/shekfDuìiffuse.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/Shelf01/uvmap.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }

                    def Shader "uvmap"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname = "UVMap"
                        float2 outputs:result
                    }
                }

                def Material "File03"
                {
                    token outputs:surface.connect = </Root/offFile/_materials/_materials/File03/Principled_BSDF.outputs:surface>

                    def Shader "Principled_BSDF"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        float inputs:clearcoat = 0
                        float inputs:clearcoatRoughness = 0.03
                        color3f inputs:diffuseColor.connect = </Root/offFile/_materials/_materials/File03/Image_Texture.outputs:rgb>
                        float inputs:ior = 1
                        float inputs:metallic = 0
                        float inputs:opacity = 1
                        float inputs:roughness = 0.69003475
                        float inputs:specular = 0.5
                        token outputs:surface
                    }

                    def Shader "Image_Texture"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/raccogliDiffuse.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/File03/uvmap.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }

                    def Shader "uvmap"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname = "UVMap"
                        float2 outputs:result
                    }
                }

                def Material "File03_001"
                {
                    token outputs:surface.connect = </Root/offFile/_materials/_materials/File03_001/Principled_BSDF.outputs:surface>

                    def Shader "Principled_BSDF"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        float inputs:clearcoat = 0
                        float inputs:clearcoatRoughness = 0.03
                        color3f inputs:diffuseColor.connect = </Root/offFile/_materials/_materials/File03_001/Image_Texture.outputs:rgb>
                        float inputs:ior = 1
                        float inputs:metallic = 0
                        float inputs:opacity = 1
                        float inputs:roughness = 0.69003475
                        float inputs:specular = 0.5
                        token outputs:surface
                    }

                    def Shader "Image_Texture"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/raccogliBLUDiffuse.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/File03_001/uvmap.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }

                    def Shader "uvmap"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname = "UVMap"
                        float2 outputs:result
                    }
                }

                def Material "Material_008"
                {
                    token outputs:surface.connect = </Root/offFile/_materials/_materials/Material_008/Principled_BSDF.outputs:surface>

                    def Shader "Principled_BSDF"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        float inputs:clearcoat = 0
                        float inputs:clearcoatRoughness = 0.03
                        color3f inputs:diffuseColor.connect = </Root/offFile/_materials/_materials/Material_008/Image_Texture.outputs:rgb>
                        float inputs:ior = 1.5
                        float inputs:metallic = 0
                        float inputs:opacity = 1
                        float inputs:roughness = 0.5
                        float inputs:specular = 0.5
                        token outputs:surface
                    }

                    def Shader "Image_Texture"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/comodinDiffuse.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/Material_008/uvmap.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }

                    def Shader "uvmap"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname = "UVMap"
                        float2 outputs:result
                    }
                }

                def Material "Drawer"
                {
                    token outputs:surface.connect = </Root/offFile/_materials/_materials/Drawer/Principled_BSDF.outputs:surface>

                    def Shader "Principled_BSDF"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        float inputs:clearcoat = 0
                        float inputs:clearcoatRoughness = 0.03
                        color3f inputs:diffuseColor.connect = </Root/offFile/_materials/_materials/Drawer/Image_Texture.outputs:rgb>
                        float inputs:ior = 1
                        float inputs:metallic = 0
                        float inputs:opacity = 1
                        float inputs:roughness = 0.69003475
                        float inputs:specular = 0.5
                        token outputs:surface
                    }

                    def Shader "Image_Texture"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/comodinoDrawDiffuse.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/Drawer/uvmap.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }

                    def Shader "uvmap"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname = "UVMap"
                        float2 outputs:result
                    }
                }

                def Material "lambert4SG"
                {
                    token outputs:surface.connect = </Root/offFile/_materials/_materials/lambert4SG/Principled_BSDF.outputs:surface>

                    def Shader "Principled_BSDF"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        float inputs:clearcoat = 0
                        float inputs:clearcoatRoughness = 0.03
                        color3f inputs:diffuseColor = (0.8, 0.8, 0.8)
                        float inputs:ior = 1.5
                        float inputs:metallic = 0
                        float inputs:opacity = 1
                        float inputs:roughness = 1
                        float inputs:specular = 0
                        token outputs:surface
                    }
                }

                def Material "Material_009"
                {
                    token outputs:surface.connect = </Root/offFile/_materials/_materials/Material_009/Principled_BSDF.outputs:surface>

                    def Shader "Principled_BSDF"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        float inputs:clearcoat = 0
                        float inputs:clearcoatRoughness = 0.03
                        color3f inputs:diffuseColor.connect = </Root/offFile/_materials/_materials/Material_009/Image_Texture.outputs:rgb>
                        color3f inputs:emissiveColor.connect = </Root/offFile/_materials/_materials/Material_009/Image_Texture_001.outputs:rgb>
                        float inputs:ior = 1.5
                        float inputs:metallic = 0
                        float inputs:opacity = 1
                        float inputs:roughness = 0.5
                        float inputs:specular = 0.5
                        token outputs:surface
                    }

                    def Shader "Image_Texture"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/printerDiffuse.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/Material_009/uvmap.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }

                    def Shader "uvmap"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname = "UVMap"
                        float2 outputs:result
                    }

                    def Shader "Image_Texture_001"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/printerEmission.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/Material_009/uvmap.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }
                }

                def Material "lambert3SG"
                {
                    token outputs:surface.connect = </Root/offFile/_materials/_materials/lambert3SG/Principled_BSDF.outputs:surface>

                    def Shader "Principled_BSDF"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        float inputs:clearcoat = 0
                        float inputs:clearcoatRoughness = 0.03
                        color3f inputs:diffuseColor.connect = </Root/offFile/_materials/_materials/lambert3SG/Image_Texture.outputs:rgb>
                        float inputs:ior = 1.5
                        float inputs:metallic = 0
                        float inputs:opacity = 1
                        float inputs:roughness = 1
                        float inputs:specular = 0
                        token outputs:surface
                    }

                    def Shader "Image_Texture"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/paperDiff.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/lambert3SG/uvmap.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }

                    def Shader "uvmap"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname = "UVMap"
                        float2 outputs:result
                    }
                }

                def Material "Mug"
                {
                    token outputs:surface.connect = </Root/offFile/_materials/_materials/Mug/Principled_BSDF.outputs:surface>

                    def Shader "Principled_BSDF"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        float inputs:clearcoat = 0
                        float inputs:clearcoatRoughness = 0.03
                        color3f inputs:diffuseColor.connect = </Root/offFile/_materials/_materials/Mug/Image_Texture.outputs:rgb>
                        float inputs:ior = 1
                        float inputs:metallic = 0
                        float3 inputs:normal.connect = </Root/offFile/_materials/_materials/Mug/Image_Texture_001.outputs:rgb>
                        float inputs:opacity = 1
                        float inputs:roughness = 0.69003475
                        float inputs:specular = 0.5
                        token outputs:surface
                    }

                    def Shader "Image_Texture"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/cupdiffuse.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/Mug/uvmap.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }

                    def Shader "uvmap"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname = "UVMap"
                        float2 outputs:result
                    }

                    def Shader "Image_Texture_001"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/cupNormal.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/Mug/uvmap.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }
                }

                def Material "Photo"
                {
                    token outputs:surface.connect = </Root/offFile/_materials/_materials/Photo/Principled_BSDF.outputs:surface>

                    def Shader "Principled_BSDF"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        float inputs:clearcoat = 0
                        float inputs:clearcoatRoughness = 0.03
                        color3f inputs:diffuseColor.connect = </Root/offFile/_materials/_materials/Photo/Image_Texture.outputs:rgb>
                        float inputs:ior = 1
                        float inputs:metallic = 0
                        float inputs:opacity = 1
                        float inputs:roughness = 0.69003475
                        float inputs:specular = 0.5
                        token outputs:surface
                    }

                    def Shader "Image_Texture"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/frameDiffuse.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/Photo/uvmap.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }

                    def Shader "uvmap"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname = "UVMap"
                        float2 outputs:result
                    }
                }

                def Material "Paper_Stack2_001"
                {
                    token outputs:surface.connect = </Root/offFile/_materials/_materials/Paper_Stack2_001/Principled_BSDF.outputs:surface>

                    def Shader "Principled_BSDF"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        float inputs:clearcoat = 0
                        float inputs:clearcoatRoughness = 0.03
                        color3f inputs:diffuseColor.connect = </Root/offFile/_materials/_materials/Paper_Stack2_001/Image_Texture.outputs:rgb>
                        float inputs:ior = 1
                        float inputs:metallic = 0
                        float inputs:opacity = 1
                        float inputs:roughness = 0.69003475
                        float inputs:specular = 0.5
                        token outputs:surface
                    }

                    def Shader "Image_Texture"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/paper2Diffuse.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/Paper_Stack2_001/uvmap.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }

                    def Shader "uvmap"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname = "UVMap"
                        float2 outputs:result
                    }
                }

                def Material "postIt"
                {
                    token outputs:surface.connect = </Root/offFile/_materials/_materials/postIt/Principled_BSDF.outputs:surface>

                    def Shader "Principled_BSDF"
                    {
                        uniform token info:id = "UsdPreviewSurface"
                        float inputs:clearcoat = 0
                        float inputs:clearcoatRoughness = 0.03
                        color3f inputs:diffuseColor.connect = </Root/offFile/_materials/_materials/postIt/Image_Texture.outputs:rgb>
                        float inputs:ior = 1.5
                        float inputs:metallic = 0
                        float3 inputs:normal.connect = </Root/offFile/_materials/_materials/postIt/Image_Texture_001.outputs:rgb>
                        float inputs:opacity = 1
                        float inputs:roughness = 0.5
                        float inputs:specular = 0.5
                        token outputs:surface
                    }

                    def Shader "Image_Texture"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/postitDiffuse.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/postIt/uvmap.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }

                    def Shader "uvmap"
                    {
                        uniform token info:id = "UsdPrimvarReader_float2"
                        token inputs:varname = "UVMap"
                        float2 outputs:result
                    }

                    def Shader "Image_Texture_001"
                    {
                        uniform token info:id = "UsdUVTexture"
                        asset inputs:file = @./textures/postitNormal.png@
                        token inputs:sourceColorSpace = "sRGB"
                        float2 inputs:st.connect = </Root/offFile/_materials/_materials/postIt/uvmap.outputs:result>
                        token inputs:wrapS = "repeat"
                        token inputs:wrapT = "repeat"
                        float3 outputs:rgb
                    }
                }
            }
        }

        def "computer" (
            active = true
            customData = {
                float3 rotationEulerHint = (-1.5707964, 0.117869265, 0)
            }
            references = @computerFinal.usdc@
        )
        {
            quatf xformOp:orient = (0.90698385, 4.863824e-8, 2.35078e-9, -0.4211654)
            float3 xformOp:scale = (2.942638, 2.9426382, 2.942638)
            float3 xformOp:translate = (9.552146, 8.993935, 9.672113)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Schermo" (
                customData = {
                    float3 rotationEulerHint = (1.4835297, 0, -1.863527e-9)
                }
            )
            {
                quatf xformOp:orient = (0.7372774, 0.67559016, -6.2949035e-10, -6.8696815e-10)
                float3 xformOp:scale = (8.034168, 8.034166, 3.5678857e-16)
                float3 xformOp:translate = (0.016604908, -0.9070928, 1.5931412)
            }

            over "Circle" (
                customData = {
                    float3 rotationEulerHint = (1.5094277, 0, 0)
                }
            )
            {
                quatf xformOp:orient = (0.72846764, 0.68508023, 4.816973e-18, -4.816967e-18)
                float3 xformOp:scale = (0.10189524, 0.10189525, 0.10189525)
                float3 xformOp:translate = (-0.002245903, -1.1190333, 0.7072506)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            over "buttonCenter" (
                customData = {
                    float3 rotationEulerHint = (0, 0, 0)
                }
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Cylinder_002" (
                    customData = {
                        float3 rotationEulerHint = (0, 0, 0)
                    }
                )
                {
                    quatf xformOp:orient = (1, 0, 0, 0)
                    float3 xformOp:scale = (1, 1, 1)
                    float3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }
            }

            over "buttonLeft" (
                customData = {
                    float3 rotationEulerHint = (0, 0, 0)
                }
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Cylinder_003" (
                    customData = {
                        float3 rotationEulerHint = (0, 0, 0)
                    }
                )
                {
                    quatf xformOp:orient = (1, 0, 0, 0)
                    float3 xformOp:scale = (1, 1, 1)
                    float3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }
            }

            over "buttonRight" (
                customData = {
                    float3 rotationEulerHint = (0, 0, 0)
                }
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Cylinder_005" (
                    customData = {
                        float3 rotationEulerHint = (0, 0, 0)
                    }
                )
                {
                    quatf xformOp:orient = (1, 0, 0, 0)
                    float3 xformOp:scale = (1, 1, 1)
                    float3 xformOp:translate = (0, 0, 0)
                }
            }

            over "Keyboard" (
                customData = {
                    float3 rotationEulerHint = (0, 0, 0)
                }
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1.333202, 1.333202, 0.23485452)
                float3 xformOp:translate = (0, -0.06227708, 0.16238135)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            over "tubocatodico" (
                customData = {
                    float3 rotationEulerHint = (-0.05709081, 0, 0)
                }
            )
            {
                quatf xformOp:orient = (0.9995926, -0.02854153, -6.3374927e-18, -4.9133866e-25)
                float3 xformOp:scale = (1.0590608, 1.0281707, 0.9614626)
                float3 xformOp:translate = (-3.8475486e-17, 0.086639084, 1.4687234)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }

            over "base_floppy" (
                customData = {
                    float3 rotationEulerHint = (0, 0, 1.2941048)
                }
            )
            {
                quatf xformOp:orient = (0.7978642, 0, 0, 0.60283726)
                float3 xformOp:scale = (1.333202, 1.333202, 0.23485452)
                float3 xformOp:translate = (0, -0.06227708, 0.16238135)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }
        }
    }

    def "SkyDome" (
        active = false
        references = @SkyDome.usdz@
    )
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (0.0049969894, 0.0049969894, 0.0049969894)
        float3 xformOp:translate = (0.49732527, 0, -0.40147632)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "Grid" (
            active = false
        )
        {
        }

        over "Ground_01" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/offFile/_materials/lambert3SG> (
                bindMaterialAs = "weakerThanDescendants"
            )
        }

        over "Looks"
        {
            over "DomeMATSG"
            {
                string inputs:file5:varname (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (-124.125, 87.5)
                        }
                    }
                )
                token outputs:mtlx:surface.connect = </Root/SkyDome/Looks/DomeMATSG/PreviewSurface.outputs:out>
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/SkyDome/Looks/DomeMATSG/DomeMAT.outputs:surface>
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (112.375, 110.5)

                over "DomeMAT" (
                    active = true
                )
                {
                    color3f inputs:diffuseColor = (0, 0, 0) (
                        colorSpace = "srgb_displayp3"
                    )
                    delete color3f inputs:emissiveColor.connect = </Root/SkyDome/Looks/DomeMATSG/file5.outputs:rgb>
                    normal3f inputs:normal = (0, 0, 0)
                    float inputs:opacity = 1
                }

                def Shader "PreviewSurface" (
                    active = false
                )
                {
                    uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                    color3f inputs:diffuseColor = (0.62855977, 0.61427796, 0.6035328) (
                        colorSpace = "srgb_displayp3"
                    )
                    float inputs:metallic
                    float inputs:roughness
                    token outputs:out
                    float2 ui:nodegraph:node:pos = (-404.6172, 94.78125)
                    int ui:nodegraph:node:stackingOrder = 4
                }
            }

            over "GroundMATSG"
            {
                string inputs:file4:varname (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (-46.695312, 39.40625)
                            int stackingOrderInSubgraph = 2
                        }
                    }
                )
                token outputs:mtlx:surface.connect = </Root/SkyDome/Looks/GroundMATSG/PreviewSurface.outputs:out>
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/SkyDome/Looks/GroundMATSG/GroundMAT.outputs:surface>
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (112.5, 110.5)

                over "GroundMAT" (
                    active = true
                )
                {
                }

                def Shader "PreviewSurface" (
                    active = false
                )
                {
                    uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                    color3f inputs:diffuseColor.connect = </Root/SkyDome/Looks/GroundMATSG/Image.outputs:out>
                    float inputs:metallic
                    float inputs:roughness
                    token outputs:out
                    float2 ui:nodegraph:node:pos = (-255, 105)
                }

                def Shader "Image"
                {
                    uniform token info:id = "ND_image_color3"
                    asset inputs:file = @istockphoto-1202896276-612x612.jpg@
                    color3f outputs:out
                    float2 ui:nodegraph:node:pos = (-595.09766, 120.13281)
                    int ui:nodegraph:node:stackingOrder = 6
                }
            }

            over "GridMATSG"
            {
                string inputs:file3:varname (
                    customData = {
                        dictionary realitykit = {
                            float2 positionInSubgraph = (-124.125, 87.5)
                        }
                    }
                )
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (112.375, 110.5)
            }
        }

        over "Dome_01" (
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/SkyDome/Looks/DomeMATSG> (
                bindMaterialAs = "weakerThanDescendants"
            )
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }
    }

    def Xform "DirectionalLight" (
        customData = {
            float3 rotationEulerHint = (-1.1890355, -0.00264405, -0.33424592)
        }
    )
    {
        quatf xformOp:orient = (0.81675285, -0.5524873, 0.09209199, -0.13853426)
        float3 xformOp:scale = (1, 1, 1)
        float3 xformOp:translate = (0.95846033, 4.2509527, 1.4040523)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def RealityKitComponent "DirectionalLight"
        {
            float3 color = (0.7204751, 0.735278, 0.6588488)
            token info:id = "RealityKit.DirectionalLight"
            float intensity = 2500

            def RealityKitStruct "Shadow"
            {
                bool isEnabled = 1
            }
        }
    }

    def "computer_old" (
        active = false
        customData = {
            float3 rotationEulerHint = (-1.5051774, 0.24433072, -1.535728e-7)
        }
        references = @computer.usdc@
    )
    {
        reorder nameChildren = ["Cylinder_005", "_materials", "Cylinder_001", "schermo", "Schermo", "Circle", "tubocatodico", "Cylinder"]
        quatf xformOp:orient = (0.7244819, -0.6784363, 0.08894958, 0.08329615)
        float3 xformOp:scale = (0.21536113, 0.21536112, 0.21536109)
        float3 xformOp:translate = (-0.08127003, 0.9973899, -2.2633111)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        over "schermo" (
            active = false
        )
        {
        }

        over "tubocatodico"
        {
            over "Cube" (
                prepend apiSchemas = ["MaterialBindingAPI"]
                customData = {
                    float3 rotationEulerHint = (0, 0, 0)
                }
            )
            {
                rel material:binding = </Root/computer/_materials/Material> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                quatf xformOp:orient = (1, 0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }
        }

        def Cube "Schermo" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
            customData = {
                float3 rotationEulerHint = (1.5079279, 0.0049483436, 0.010788661)
            }
        )
        {
            rel material:binding = </Root/computer/Schermo/Material> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 0.2
            quatf xformOp:orient = (0.72897744, 0.68451196, 0.005496169, 0.0022387065)
            float3 xformOp:scale = (8.2544985, 8.254497, 3.6657333e-16)
            float3 xformOp:translate = (-0.01404381, -0.88978684, 1.6380436)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Material "Material"
            {
                token outputs:mtlx:surface.connect = </Root/computer/Schermo/Material/PreviewSurface.outputs:out>
                token outputs:realitykit:vertex
                float2 ui:nodegraph:realitykit:subgraphOutputs:pos = (335.25, 100.5)

                def Shader "PreviewSurface"
                {
                    uniform token info:id = "ND_UsdPreviewSurface_surfaceshader"
                    color3f inputs:diffuseColor.connect = </Root/computer/Schermo/Material/Image.outputs:out>
                    float inputs:metallic
                    float inputs:roughness
                    token outputs:out
                    float2 ui:nodegraph:node:pos = (93.5, 100.5)
                }

                def Shader "Image"
                {
                    uniform token info:id = "ND_image_color3"
                    asset inputs:file = @Screens/Captcha Onb.png@
                    color3f outputs:out
                    float2 ui:nodegraph:node:pos = (-170.86328, 69.88281)
                    int ui:nodegraph:node:stackingOrder = 2
                }
            }
        }

        over "Cylinder_005"
        {
            reorder nameChildren = ["Cylinder_004", "Cylinder_003", "Cylinder_6", "Cylinder_002"]
            over "Cylinder_004"
            {
                reorder nameChildren = ["Cylinder_005", "ButtonLeft", "ButtonCenter"]
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Cylinder_005" (
                    customData = {
                        dictionary RE = {
                            dictionary mesh = {
                                dictionary v1 = {
                                    bool reorderVertexCaching = 0
                                }
                            }
                        }
                        float3 rotationEulerHint = (-4.424803e-10, -1.1840072e-10, 0.058713317)
                    }
                )
                {
                    uniform token subdivisionScheme = "none"
                    quatf xformOp:orient = (0.9995691, -2.1940715e-10, -6.566879e-11, 0.029352441)
                    float3 xformOp:translate = (0.34990573, -1.4202385, 1.8439007)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                    def RealityKitComponent "InputTarget"
                    {
                        uniform token info:id = "RealityKit.InputTarget"
                    }

                    def RealityKitComponent "Collider"
                    {
                        uint group = 1
                        uniform token info:id = "RealityKit.Collider"
                        uint mask = 4294967295
                        token type = "Default"

                        def RealityKitStruct "Shape"
                        {
                            float3 extent = (0.16759464, 0.2930636, 0.58582985)
                            token shapeType = "Box"

                            def RealityKitStruct "pose"
                            {
                                float3 position = (-0.0022549778, -0.0005466789, -0.12492651)
                            }
                        }
                    }
                }
            }

            over "Cylinder_003"
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (0.9999999, 0.9999999, 1)
                float3 xformOp:translate = (-0.35070133, -1.4397769, 1.0216656)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Cylinder_003"
                {
                    float3 xformOp:translate = (0.000003218651, 0.000012397767, 0.7608147)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                    def RealityKitComponent "InputTarget"
                    {
                        uniform token info:id = "RealityKit.InputTarget"
                    }

                    def RealityKitComponent "Collider"
                    {
                        uint group = 1
                        uniform token info:id = "RealityKit.Collider"
                        uint mask = 4294967295
                        token type = "Default"

                        def RealityKitStruct "Shape"
                        {
                            float3 extent = (0.16674715, 0.2914561, 0.58074754)
                            token shapeType = "Box"

                            def RealityKitStruct "pose"
                            {
                                float3 position = (-0.0024176538, -0.0004554391, -0.12746713)
                            }
                        }
                    }
                }
            }

            over "Cylinder_002"
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (0.9999999, 0.9999999, 1)
                float3 xformOp:translate = (0.0018676519, -1.4691973, 1.7087421)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "Cylinder_002"
                {
                    float3 xformOp:translate = (0.000019073488, 0.00009298325, 0.27243808)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                    def RealityKitComponent "InputTarget"
                    {
                        uniform token info:id = "RealityKit.InputTarget"
                    }

                    def RealityKitComponent "Collider"
                    {
                        uint group = 1
                        uniform token info:id = "RealityKit.Collider"
                        uint mask = 4294967295
                        token type = "Default"

                        def RealityKitStruct "Shape"
                        {
                            float3 extent = (0.16758263, 0.27396262, 0.5762304)
                            token shapeType = "Box"

                            def RealityKitStruct "pose"
                            {
                                float3 position = (-0.00007554144, 0.002408564, -0.12588352)
                            }
                        }
                    }
                }
            }
        }

        over "Cylinder_001" (
            active = false
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1.333202, 1.333202, 0.23485452)
            float3 xformOp:translate = (0.000041723255, 0.41280657, 0.1624179)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "Cylinder_001"
            {
                float3 xformOp:translate = (0.000004529953, -4.026885, 15.754238)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }
        }

        over "Circle"
        {
            over "Circle"
            {
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def RealityKitComponent "Collider"
                {
                    uint group = 1
                    uniform token info:id = "RealityKit.Collider"
                    uint mask = 4294967295
                    token type = "Default"

                    def RealityKitStruct "Shape"
                    {
                        float3 extent = (1.976659, 1.9775722, 0.4998941)
                        token shapeType = "Box"

                        def RealityKitStruct "pose"
                        {
                            float3 position = (0.0004515648, 0.006706476, 0.24994706)
                        }
                    }
                }
            }
        }
    }

    def RealityKitTimeline "ButtonLeftPRess"
    {
        reorder nameChildren = ["Track", "Track2"]
        def RealityKitTrack "Track"
        {
            def RealityKitAction "Transform_By"
            {
                string actionKind = "moveBy"
                int blendLayer = 300
                double duration = 0.5022868023917996
                uniform token info:id = "CAE87FEB-F021-44D5-B570-0C0054BF1602"
                float3 position = (0, 0, -0.34436)
                double startTime = 0
                rel target = </Root/computer_old/Cylinder_005/Cylinder_003/Cylinder_003>

                def RealityKitStruct "timingFunction"
                {
                }
            }

            def RealityKitAction "Transform_By2"
            {
                string actionKind = "moveBy"
                int blendLayer = 300
                double duration = 0.5022868023917996
                uniform token info:id = "CAE87FEB-F021-44D5-B570-0C0054BF1602"
                float3 position = (0, 0, 0.34436)
                double startTime = 0.5022868024917996
                rel target = </Root/computer_old/Cylinder_005/Cylinder_003/Cylinder_003>
                float2 ui:nodegraph:node:pos = (28.75, 114.5)
                int ui:nodegraph:node:stackingOrder = 1

                def RealityKitStruct "timingFunction"
                {
                }
            }
        }
    }

    def RealityKitTimeline "ButtonCenterPRess"
    {
        reorder nameChildren = ["Track", "Track2"]
        float2 ui:nodegraph:node:pos = (28.75, 114.5)
        int ui:nodegraph:node:stackingOrder = 1

        def RealityKitTrack "Track"
        {
            def RealityKitAction "Transform_By"
            {
                string actionKind = "moveBy"
                int blendLayer = 300
                double duration = 0.5022868023917996
                uniform token info:id = "CAE87FEB-F021-44D5-B570-0C0054BF1602"
                float3 position = (0, 0, -0.34436)
                double startTime = 0
                rel target = </Root/computer_old/Cylinder_005/Cylinder_002/Cylinder_002>

                def RealityKitStruct "timingFunction"
                {
                }
            }

            def RealityKitAction "Transform_By2"
            {
                string actionKind = "moveBy"
                int blendLayer = 300
                double duration = 0.5022868023917996
                uniform token info:id = "CAE87FEB-F021-44D5-B570-0C0054BF1602"
                float3 position = (0, 0, 0.34436)
                double startTime = 0.5022868024917996
                rel target = </Root/computer_old/Cylinder_005/Cylinder_002/Cylinder_002>
                float2 ui:nodegraph:node:pos = (28.75, 114.5)
                int ui:nodegraph:node:stackingOrder = 1

                def RealityKitStruct "timingFunction"
                {
                }
            }
        }
    }

    def RealityKitTimeline "ButtonRightPRess"
    {
        reorder nameChildren = ["Track", "Track2"]
        float2 ui:nodegraph:node:pos = (48.75, 134.5)
        int ui:nodegraph:node:stackingOrder = 2

        def RealityKitTrack "Track"
        {
            def RealityKitAction "Transform_By"
            {
                string actionKind = "moveBy"
                int blendLayer = 300
                double duration = 0.5022868023917996
                uniform token info:id = "CAE87FEB-F021-44D5-B570-0C0054BF1602"
                float3 position = (0, 0, -0.34436)
                double startTime = 0
                rel target = </Root/computer_old/Cylinder_005/Cylinder_004/Cylinder_005>

                def RealityKitStruct "timingFunction"
                {
                }
            }

            def RealityKitAction "Transform_By2"
            {
                string actionKind = "moveBy"
                int blendLayer = 300
                double duration = 0.5022868023917996
                uniform token info:id = "CAE87FEB-F021-44D5-B570-0C0054BF1602"
                float3 position = (0, 0, 0.34436)
                double startTime = 0.5022868024917996
                rel target = </Root/computer_old/Cylinder_005/Cylinder_004/Cylinder_005>
                float2 ui:nodegraph:node:pos = (28.75, 114.5)
                int ui:nodegraph:node:stackingOrder = 1

                def RealityKitStruct "timingFunction"
                {
                }
            }
        }
    }
}

